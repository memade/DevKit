macro(GFN_ENV_INIT)
  # Set system name.
  if(WIN32)
   set(CMAKE_SYSTEM_NAME "windows")
  elseif(UNIX)
   set(CMAKE_SYSTEM_NAME "linux")
  else()
   set(CMAKE_SYSTEM_NAME "unknown")
  endif()

  # Set the current project root directory.
  set(PROJECT_ROOT_DIR ${CMAKE_CURRENT_SOURCE_DIR})

  # Set the default installation directory.
  #if("${CMAKE_INSTALL_PREFIX}" STREQUAL "")
   # set(CMAKE_INSTALL_PREFIX "${PROJECT_ROOT_DIR}/bin")
  #endif()

  #option(CMAKE_INSTALL_PREFIX "DevKit install root dir." ${PROJECT_ROOT_DIR}/bin)
  #set(CMAKE_INSTALL_PREFIX "${PROJECT_ROOT_DIR}/bin")

  add_definitions(-DUNICODE -D_UNICODE)
  set(CMAKE_CONFIGURATION_TYPES "Debug;Release;" CACHE STRING "info" FORCE)

  set(CMAKE_CXX_STANDARD 17)
  
  message(STATUS "Current system name '${CMAKE_SYSTEM_NAME}'.")
endmacro(GFN_ENV_INIT)

macro(GFN_ENV_UNINIT)
  
endmacro(GFN_ENV_UNINIT)


macro(GFN_CLANG_TOOLCHAIN_SET)
 if(UNIX)
  set(CMAKE_SYSTEM_NAME Linux)
  set (CMAKE_C_COMPILER             "clang")
  set (CMAKE_C_FLAGS                "-Wall -std=c99 -v")
  set (CMAKE_C_FLAGS_DEBUG          "-g")
  set (CMAKE_C_FLAGS_MINSIZEREL     "-Os -DNDEBUG")
  set (CMAKE_C_FLAGS_RELEASE        "-O4 -DNDEBUG")
  set (CMAKE_C_FLAGS_RELWITHDEBINFO "-O2 -g")

  set (CMAKE_CXX_COMPILER             "clang++")
  set (CMAKE_CXX_FLAGS                "-Wall -v")
  set (CMAKE_CXX_FLAGS_DEBUG          "-g")
  set (CMAKE_CXX_FLAGS_MINSIZEREL     "-Os -DNDEBUG")
  set (CMAKE_CXX_FLAGS_RELEASE        "-O4 -DNDEBUG")
  set (CMAKE_CXX_FLAGS_RELWITHDEBINFO "-O2 -g")

  set (CMAKE_AR      "/usr/bin/llvm-ar")
  set (CMAKE_LINKER  "/usr/bin/llvm-ld")
  set (CMAKE_NM      "/usr/bin/llvm-nm")
  set (CMAKE_OBJDUMP "/usr/bin/llvm-objdump")
  set (CMAKE_RANLIB  "/usr/bin/llvm-ranlib")
 elseif(WIN32)
  set(CMAKE_SYSTEM_NAME Windows)


 endif()
endmacro(GFN_CLANG_TOOLCHAIN_SET)

macro(GFN_RUNTIME_SET)
 if(WIN32)
  if(MSVC)
   option(COMPILE_ENABLE_RUNTIME_RT "If MSVC and set /MT." ON)
   if(COMPILE_ENABLE_RUNTIME_RT)
    add_compile_options(
     $<$<CONFIG:>:/MT>
     $<$<CONFIG:Debug>:/MTd>
     $<$<CONFIG:Release>:/MT>)
   else()
    add_compile_options(
     $<$<CONFIG:>:/MD>
     $<$<CONFIG:Debug>:/MDd>
     $<$<CONFIG:Release>:/MD>)
   endif()
  endif(MSVC)
 elseif(UNIX)


 endif()
endmacro()


macro(GFN_BUILD_TYPE_SET)
 if("${CMAKE_BUILD_TYPE}" STREQUAL "")
  set(CMAKE_BUILD_TYPE "Release")
  if(CMAKE_CXX_FLAGS MATCHES "-g" OR CMAKE_C_FLAGS MATCHES "-g")
   set(CMAKE_BUILD_TYPE "Debug")
  endif()
 endif()
endmacro(GFN_BUILD_TYPE_SET)

macro(GFN_PLATFORM_GET INOUT_PLATFORM)
 set(${INOUT_PLATFORM} "x86")
 if((CMAKE_SIZEOF_VOID_P EQUAL 8) OR ("${CMAKE_SYSTEM_PROCESSOR}" STREQUAL "x86_64") OR __x86_64__)
  set(${INOUT_PLATFORM} "x64")
 endif()
endmacro(GFN_PLATFORM_GET)


macro(GFN_BUILDTYPE_GET BUILDTYPE)
 set(${BUILDTYPE} "Release")
 if(CMAKE_CXX_FLAGS MATCHES "-g" OR CMAKE_C_FLAGS MATCHES "-g")
  set(${BUILDTYPE} "Debug")
 endif()
endmacro(GFN_BUILDTYPE_GET)


function(GFN_PROJECT_SOURCE_GET INPUT_DIR OUTPUT_HEADERS OUTPUT_SOURCES)
 set(NEW_OUTPUT_SOURCES)
 set(NEW_OUTPUT_HEADERS)
 file(GLOB_RECURSE NEW_OUTPUT_HEADERS "${INPUT_DIR}/*.h" "${INPUT_DIR}/*.hpp")
 file(GLOB_RECURSE NEW_OUTPUT_SOURCES 
 "${INPUT_DIR}/*.c" 
 "${INPUT_DIR}/*.cc" 
 "${INPUT_DIR}/*.cpp"
 "${INPUT_DIR}/*.cxx"
 "${INPUT_DIR}/*.rc" 
 "${INPUT_DIR}/*.def")

 set(${OUTPUT_HEADERS} ${NEW_OUTPUT_HEADERS} PARENT_SCOPE)
 set(${OUTPUT_SOURCES} ${NEW_OUTPUT_SOURCES} PARENT_SCOPE)
endfunction(GFN_PROJECT_SOURCE_GET)

macro(GFN_SET_TARGET_OUTDIR)
 # ARG 0 => 'Benchmark directory'
 # ARG 1 => 'PUBLISH_RUNTIME'
 # ARG 2 => 'PUBLISH_LIBRARY'
 # ARG 3 => 'PUBLISH_ARCHIVE'

 if((${ARGC} GREATER 0) AND (IS_DIRECTORY ${ARGV0}))
  set(BENCHMARK_DIR ${ARGV0})
  set(RUNTIME_DIR ${ARGV1})
  set(LIBRARY_DIR ${ARGV2})
  set(ARCHIVE_DIR ${ARGV3})
  #set(SPECIFIED_DIR ${ARGV4}) # BOOL

  if("${RUNTIME_DIR}" STREQUAL "")
  set(RUNTIME_DIR "bin")
  endif()

  if("${LIBRARY_DIR}" STREQUAL "")
  set(LIBRARY_DIR "libs")
  endif()

  if("${ARCHIVE_DIR}" STREQUAL "")
  set(LIBRARY_DIR "objs")
  endif()

  GFN_BUILDTYPE_GET(BUILDTYPE)
  GFN_PLATFORM_GET(PLATFORM)

  set(PUBLISH_LIBRARY ${BENCHMARK_DIR}/${LIBRARY_DIR})
  set(PUBLISH_RUNTIME ${BENCHMARK_DIR}/${RUNTIME_DIR})
  set(PUBLISH_ARCHIVE ${BENCHMARK_DIR}/${ARCHIVE_DIR})
  set(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${PUBLISH_LIBRARY})
  set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${PUBLISH_RUNTIME})
  set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${PUBLISH_ARCHIVE})

  set(CMAKE_RUNTIME_OUTPUT_DIRECTORY_DEBUG ${PUBLISH_RUNTIME}/${PLATFORM}/Debug)
  set(CMAKE_RUNTIME_OUTPUT_DIRECTORY_RELEASE ${PUBLISH_RUNTIME}/${PLATFORM}/Release)
  set(CMAKE_LIBRARY_OUTPUT_DIRECTORY_DEBUG ${PUBLISH_LIBRARY}/${PLATFORM}/Debug)
  set(CMAKE_LIBRARY_OUTPUT_DIRECTORY_RELEASE ${PUBLISH_LIBRARY}/${PLATFORM}/Release)
  set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY_DEBUG ${PUBLISH_ARCHIVE}/${PLATFORM}/Debug)
  set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY_RELEASE ${PUBLISH_ARCHIVE}/${PLATFORM}/Release)
  #message(STATUS "${BENCHMARK_DIR}/${LIBRARY_DIR}/${CURRENT_COMPILE_PLATFORM}/ ${PLATFORM} ${BUILDTYPE}")
 else()
  set(CMAKE_RUNTIME_OUTPUT_DIRECTORY_DEBUG "")
  set(CMAKE_RUNTIME_OUTPUT_DIRECTORY_RELEASE "")
  set(CMAKE_LIBRARY_OUTPUT_DIRECTORY_DEBUG "")
  set(CMAKE_LIBRARY_OUTPUT_DIRECTORY_RELEASE "")
  set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY_DEBUG "")
  set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY_RELEASE "")
 endif()

endmacro(GFN_SET_TARGET_OUTDIR)
